#!/bin/bash

#
# Uninstalls an installed instance of secrets-safe. 
# Assumes the helm and kubectl tools have been configured to point at the cluster as per installation steps. 
# Optionally accepts a single argument for the namespace. 
# To run this script non-interactively export KUBE_NAMESPACE before calling. 
#

# The default kubernetes namesapce if not specified
export DEFAULT_KUBE_NAMESPACE="secrets-safe"

# The release name for installations in the dfault namespace
export SECRET_SAFE_RELEASE="secrets-safe-release"

if [ "$#" -lt 1 ] && [ -z "${KUBE_NAMESPACE}" ]; then
    echo -e "Please specify the namespace you wish to uninstall secrets-safe for. Note that versions prior to 20.2 exist only in the 'default' namespace. \n\n\nType the name of the desired kubernetes namespace and press enter, or leave the entry blank and press enter for 'secrets-safe': "
    read KUBE_NAMESPACE
    export KUBE_NAMESPACE
elif [ -z "${KUBE_NAMESPACE}" ]; then
    export KUBE_NAMESPACE=$1
    echo "About to uninstall secrets-safe from namespace ${KUBE_NAMESPACE}. Press enter to continue."
    read 
fi
if [ -z "${KUBE_NAMESPACE}" ]; then
    export KUBE_NAMESPACE="${DEFAULT_KUBE_NAMESPACE}"
fi

# Adjust the release name if installing to a non-default namespace
if [ "${KUBE_NAMESPACE}" != "${DEFAULT_KUBE_NAMESPACE}" ]; then
    SECRET_SAFE_RELEASE="secrets-safe-${KUBE_NAMESPACE}-release"
fi

helm version | grep v3 &> /dev/null
if [[ $? != 0 ]]; then
    echo -e "\n\n\nHelm 3 is required to uninstall. If you are attempting to upgrade from helm2 to helm3 please refer to our troubleshooting documentation\n\n"
    exit 1
fi


export SECRETS_SAFE_INSTALLED=`helm list --namespace ${KUBE_NAMESPACE} | grep ${SECRET_SAFE_RELEASE} | wc -l`

# Prompt if we are trying to uninstall and no instance exists
while [ "${SECRETS_SAFE_INSTALLED}" == "0" ] && [ "${FORCE_UNINSTALL}" != "true" ] ; do
    echo "No installation of secrets-safe is detected in this namespace. Force uninstall anyway? (true/false)"
    read FORCE_UNINSTALL
    export FORCE_UNINSTALL
    if [ "${FORCE_UNINSTALL}" == "false" ]; then
        exit 0
    fi
done

WORKING_DIR=`dirname $(readlink -f "${0}")`

helm delete ${SECRET_SAFE_RELEASE} --namespace ${KUBE_NAMESPACE}

# remove cert creation artifacts
cd ${WORKING_DIR}/data/certs
rm -rf auditor authenticator authorizer elk healthmonitor keymanager lockbox rabbitmq rabbitmqclient standardgateway postgres
cd - > /dev/null


# delete any secrets generated by this script
kubectl delete -n ${KUBE_NAMESPACE} secret auditorcertsecret healthmonitorcertsecret \
        authenticatorcertsecret authorizercertsecret \
        keymanagercertsecret lockboxcertsecret standardgatewaycertsecret \
        rabbitmqcertsecret rabbitmqclientcertsecret btregistryaccess \
        certificate-passwords secrets-safe-connection-strings rabbitmqcredentials-secret

kubectl delete csr auditor.${KUBE_NAMESPACE}-namespace authenticator.${KUBE_NAMESPACE}-namespace \
        authorizer.${KUBE_NAMESPACE}-namespace healthmonitor.${KUBE_NAMESPACE}-namespace \
        keymanager.${KUBE_NAMESPACE}-namespace lockbox.${KUBE_NAMESPACE}-namespace rabbitmq.${KUBE_NAMESPACE}-namespace \
        rabbitmqclient.${KUBE_NAMESPACE}-namespace standardgateway.${KUBE_NAMESPACE}-namespace
